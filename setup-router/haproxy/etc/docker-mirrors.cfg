global
    daemon
    # 设置进程数和线程数
    nbthread 4
    # 日志配置
    log stdout local0 info
    
    # 优化缓存性能的全局设置
    tune.bufsize 32768
    tune.maxrewrite 8192

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    
    # 启用HTTP日志
    option httplog
    log global
    
    # 压缩配置
    compression algo gzip
    compression type text/plain text/css text/javascript application/javascript application/json

resolvers dns_servers
  nameserver ns1 119.29.29.29:53
  nameserver ns2 223.5.5.5:53
  # 设置不同记录类型的缓存时间
  hold valid 600s     # 有效记录缓存时间
  hold nx 30s         # NXDOMAIN 记录缓存时间  
  hold other 30s      # 其他错误记录缓存时间
  hold refused 30s    # 被拒绝查询的缓存时间
  hold timeout 30s    # 超时查询的缓存时间
  hold obsolete 30s   # 过期记录的缓存时间
  # Whether to add nameservers found in /etc/resolv.conf
  parse-resolv-conf
  # How many times to retry a query
  resolve_retries 3
  # How long to wait between retries when no valid response has been received
  timeout retry 3s
  # How long to wait for a successful resolution
  timeout resolve 3s

userlist docker_mirror_users
  user joe insecure-password joespassword

##统计页面
#frontend stats
#   bind *:8404
#   stats enable
#   stats uri /
#   stats refresh 10s

# 定义Docker专用缓存
cache docker-cache
    # 缓存总大小 (MB) - 根据需要调整
    total-max-size 204800  # 200GB
    # 单个对象最大大小 (bytes) - Git LFS文件可能很大
    max-object-size 524288000  # 500MB
    # 默认缓存时间 (秒) - 可以被Cache-Control头覆盖
    max-age 3600
    # 处理Vary头
    process-vary on
    # 最大二级条目数
    max-secondary-entries 20

# TCP代理前端
frontend docker_mirror_frontend_tcp_default
    mode tcp
    bind [::]:6023 v4v6
    default_backend docker_mirror_backend_tcp_default

# TCP代理后端
backend docker_mirror_backend_tcp_default
    balance roundrobin
    
    # 代理目标服务器
    server docker_tcp_s1 mirror.ccs.tencentyun.com:443 check resolvers dns_servers


crt-store docker_mirror_https_certs
  crt-base /etc/haproxy/ssl
  key-base /etc/haproxy/ssl
  load crt "fullchain_key.cer"
  load crt "fullchain.cer" key "example.org.key"

# HTTP代理前端
frontend docker_mirror_frontend_http_default
    mode http
    bind [::]:80 v4v6
    bind [::]:443 v4v6 ssl crt "@docker_mirror_https_certs/fullchain_key.cer" crt "@docker_mirror_https_certs/fullchain.crt"
    
    # 启用缓存过滤器
    filter cache docker-cache
    
    # 默认后端
    default_backend docker_mirror_backend_http_default

# HTTP代理后端
backend docker_mirror_backend_http_default
    balance roundrobin
    
    # 配置缓存规则
    filter cache docker-cache
    
    # 缓存
    # http-request cache-use docker-cache if { path_beg /.git/lfs/objects/ }
    # http-request cache-use docker-cache if { path_reg ^.*/lfs/objects/ }
    
    # 缓存带有特定扩展名的大文件
    # http-request cache-use docker-cache if { path_end .zip } || { path_end .tar } || { path_end .gz } || { path_end .xz }
    
    # 为缓存的对象添加适当的头部
    http-response cache-store docker-cache
    
    # 后端服务器
    server docker_http_s1 https://mirror.ccs.tencentyun.com check resolvers dns_servers

# 可选：专门的缓存清理配置
frontend cache-admin
    bind [::]:8405 v4v6
    mode http
    
    # 清理特定缓存条目的API端点
    http-request return status 200 content-type "application/json" string '{"status": "cache cleared"}' if { path /clear-cache } { method POST }
    
    # 缓存统计信息
    http-request return status 200 content-type "application/json" string '{"cache": "docker-cache", "stats": "available via stats page"}' if { path /cache-info }
    
    # 默认返回404
    http-request return status 404