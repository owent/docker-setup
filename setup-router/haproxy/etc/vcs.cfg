global
    daemon
    # 设置进程数和线程数
    nbthread 4
    # 日志配置
    log stdout local0 info
    
    # 优化缓存性能的全局设置
    tune.bufsize 32768
    tune.maxrewrite 8192

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    
    # 启用HTTP日志
    option httplog
    log global
    
    # 压缩配置
    compression algo gzip
    compression type text/plain text/css text/javascript application/javascript application/json

##统计页面
#frontend stats
#   bind *:8404
#   stats enable
#   stats uri /
#   stats refresh 10s

# 定义Git Blob和LFS专用缓存
cache git-cache
    # 缓存总大小 (MB) - 根据需要调整
    total-max-size 204800  # 200GB
    # 单个对象最大大小 (bytes) - Git LFS文件可能很大
    max-object-size 524288000  # 500MB
    # 默认缓存时间 (秒) - 可以被Cache-Control头覆盖
    max-age 3600
    # 处理Vary头
    process-vary on
    # 最大二级条目数
    max-secondary-entries 20

# Git服务器后端
backend git-servers
    balance roundrobin
    
    # 配置缓存规则
    filter cache git-cache
    
    # 缓存Git blob对象 - 匹配 /objects/ 路径
    http-request cache-use git-cache if { path_beg /objects/ }
    
    # 缓存Git LFS对象 - 匹配常见的LFS URL模式
    http-request cache-use git-cache if { path_beg /.git/lfs/objects/ }
    http-request cache-use git-cache if { path_reg ^.*/git-lfs/objects/ }
    http-request cache-use git-cache if { path_reg ^.*/lfs/objects/ }
    
    # 缓存带有特定扩展名的大文件
    http-request cache-use git-cache if { path_end .zip } || { path_end .tar } || { path_end .gz } || { path_end .xz }
    
    # 为缓存的对象添加适当的头部
    http-response cache-store git-cache
    
    # 为缓存命中添加头部标识
    http-response set-header X-Cache-Status HIT if !{ srv_id -m found }
    http-response set-header X-Cache-Status MISS if { srv_id -m found }
    
    # 添加你的Git服务器
    server git1 192.168.1.10:80 check
    server git2 192.168.1.11:80 check

# 专门的Git LFS后端 (如果有单独的LFS服务器)
backend git-lfs-servers
    balance roundrobin
    
    filter cache git-cache
    
    # 缓存所有LFS请求
    http-request cache-use git-cache
    http-response cache-store git-cache
    
    # 设置较长的缓存时间，因为LFS对象通常是不可变的
    http-response set-header Cache-Control "public, max-age=86400" if !{ res.hdr(cache-control) -m found }
    
    server lfs1 192.168.1.20:80 check
    server lfs2 192.168.1.21:80 check

# 前端配置
frontend git-frontend
    bind [::]*:80 v4v6
    bind [::]*:443 v4v6 ssl crt /path/to/your/cert.pem

    # 自动跳转HTTPS
    http-request redirect scheme https unless { ssl_fc }
    # 设置X-Forwarded-For
    option forwardfor
    # 设置X-Forwarded-Proto
    acl h_xfp_exists req.hdr(X-Forwarded-Proto) -m found
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc } !h_xfp_exists
    http-request set-header X-Forwarded-Proto https if { ssl_fc } !h_xfp_exists
    # 设置X-Forwarded-Host
    acl h_xfh_exists req.hdr(X-Forwarded-Host) -m found
    http-request set-header X-Forwarded-Host %[req.hdr(host)] if !h_xfh_exists
    # 设置X-Forwarded-Port
    acl h_xfport_exists req.hdr(X-Forwarded-Port) -m found
    http-request set-header X-Forwarded-Port %[dst_port] if !h_xfport_exists
    # 设置X-Real-Ip
    acl h_xrip_exists req.hdr(X-Real-Ip) -m found
    http-request set-header X-Real-Ip %[src] if !h_xrip_exists
    # 设置X-Client-IP
    acl h_xcip_exists req.hdr(X-Client-IP) -m found
    http-request set-header X-Client-IP %[src] if !h_xcip_exists
    
    # 启用缓存过滤器
    filter cache git-cache
    
    # 路由规则
    # Git协议相关请求
    use_backend git-servers if { path_beg /git/ }
    use_backend git-servers if { path_end .git/info/refs }
    use_backend git-servers if { path_end .git/git-upload-pack }
    use_backend git-servers if { path_end .git/git-receive-pack }
    
    # Git对象请求 (包含blob)
    use_backend git-servers if { path_beg /objects/ }
    use_backend git-servers if { path_reg ^.*/\.git/objects/ }
    
    # Git LFS请求
    use_backend git-lfs-servers if { path_beg /.git/lfs/ }
    use_backend git-lfs-servers if { path_reg ^.*/git-lfs/ }
    use_backend git-lfs-servers if { path_reg ^.*/lfs/ }
    
    # 默认后端
    default_backend git-servers

# 监控和统计配置
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats show-legends
    stats refresh 10s
    # 显示缓存统计信息
    stats show-modules

# 可选：专门的缓存清理配置
frontend cache-admin
    bind [::]:8405 v4v6
    mode http
    
    # 清理特定缓存条目的API端点
    http-request return status 200 content-type "application/json" string '{"status": "cache cleared"}' if { path /clear-cache } { method POST }
    
    # 缓存统计信息
    http-request return status 200 content-type "application/json" string '{"cache": "git-cache", "stats": "available via stats page"}' if { path /cache-info }
    
    # 默认返回404
    http-request return status 404