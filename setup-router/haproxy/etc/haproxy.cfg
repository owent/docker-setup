global
    # daemon
    # user root
    # group root
    # 设置进程数和线程数
    nbthread 4
    # 日志配置
    log stdout local0 info
    # 连接数限制
    maxconn 65536
    # 调整全局参数
    tune.bufsize        65536   # 64KB缓冲区
    tune.rcvbuf.client  1048576 # 1MB接收缓冲区
    tune.sndbuf.client  1048576 # 1MB发送缓冲区

defaults
    # 大文件传输优化
    option dontlognull
    option http-server-close    # 避免keep-alive干扰
    timeout connect     30s
    timeout client      8h      # 8小时
    timeout server      8h      # 8小时
    timeout tunnel      8h     # 隧道连接（WebSocket等）
    timeout queue       60s
    timeout check       15s
    timeout http-request 60s    # 允许慢速上传请求头

##统计页面
# frontend stats
#     mode http
#     bind *:8404
#     stats enable
#     stats uri /
#     stats refresh 10s
#     stats admin if LOCALHOST

resolvers dns_servers
  nameserver ns1 119.29.29.29:53
  nameserver ns2 223.5.5.5:53

frontend p4d
  mode tcp
  bind :8666
  default_backend p4d_servers

backend p4d_servers
  mode tcp
  balance leastconn
  server p4d_s1 <example.org>:8666 check resolvers dns_servers

frontend git_ssh
  mode tcp
  bind :6022
  default_backend git_ssh_servers

backend git_ssh_servers
  mode tcp
  balance leastconn
  server git_ssh_s1 <example.org>:22 check resolvers dns_servers

frontend git_http
  mode tcp
  bind :6023
  default_backend git_http_servers

backend git_http_servers
  mode tcp
  balance leastconn
  server git_http_s1 <example.org>:6023 check resolvers dns_servers

crt-store git_https_certs
  crt-base /etc/haproxy/ssl
  key-base /etc/haproxy/ssl
  load crt "fullchain_key.cer"
  load crt "fullchain.cer" key "example.org.key"

frontend git_https_proxy
  mode http
  bind :80
  bind :443 ssl crt "@git_https_certs/fullchain_key.cer" crt "@git_https_certs/fullchain.crt"
  http-request redirect scheme https unless { ssl_fc }
  # 设置X-Forwarded-For
  option forwardfor
  # 设置X-Forwarded-Proto
  acl h_xfp_exists req.hdr(X-Forwarded-Proto) -m found
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc } !h_xfp_exists
  http-request set-header X-Forwarded-Proto https if { ssl_fc } !h_xfp_exists
  # 设置X-Forwarded-Host
  acl h_xfh_exists req.hdr(X-Forwarded-Host) -m found
  http-request set-header X-Forwarded-Host %[req.hdr(host)] if !h_xfh_exists

  # 后端服务
  default_backend git_https_proxy_servers

backend git_https_proxy_servers
  mode http
  balance leastconn

  # 确保Host header传递给后端
  http-request set-header Host %[req.hdr(host)]

  server git_https_proxy_s1 <example.org>:6023 check resolvers dns_servers
  # server git_https_s1 <example.org>:6023 check resolvers dns_servers ssl verify required ca-file /myca.pem sni req.hdr(Host)
  # server git_https_s1 <example.org>:6023 check resolvers dns_servers ssl verify none ca-file /myca.pem sni req.hdr(Host)